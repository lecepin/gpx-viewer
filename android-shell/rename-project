#!/bin/bash

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 获取脚本所在目录
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPT_DIR"

echo -e "${BLUE}======================================${NC}"
echo -e "${BLUE}   Android 项目重命名工具${NC}"
echo -e "${BLUE}======================================${NC}"
echo ""

# 读取当前包名
CURRENT_PACKAGE=$(grep "namespace" app/build.gradle | sed "s/.*namespace '\(.*\)'/\1/" | tr -d ' ')
if [ -z "$CURRENT_PACKAGE" ]; then
    CURRENT_PACKAGE=$(grep "applicationId" app/build.gradle | sed "s/.*applicationId \"\(.*\)\"/\1/" | tr -d ' ')
fi

# 读取当前项目名
CURRENT_PROJECT=$(grep "rootProject.name" settings.gradle | sed "s/.*rootProject.name = \"\(.*\)\"/\1/" | tr -d ' ')

# 显示当前信息
echo -e "${YELLOW}当前配置：${NC}"
echo -e "  包名: ${GREEN}$CURRENT_PACKAGE${NC}"
echo -e "  项目名: ${GREEN}$CURRENT_PROJECT${NC}"
echo ""

# 提示用户输入新包名
echo -e "${YELLOW}请输入新的包名 (当前: $CURRENT_PACKAGE)${NC}"
echo -e "${YELLOW}直接回车保持不变:${NC}"
read -p "> " NEW_PACKAGE
if [ -z "$NEW_PACKAGE" ]; then
    NEW_PACKAGE="$CURRENT_PACKAGE"
    echo -e "${BLUE}保持包名不变: $NEW_PACKAGE${NC}"
fi

# 提示用户输入新项目名
echo ""
echo -e "${YELLOW}请输入新的项目名 (当前: $CURRENT_PROJECT)${NC}"
echo -e "${YELLOW}直接回车保持不变:${NC}"
read -p "> " NEW_PROJECT
if [ -z "$NEW_PROJECT" ]; then
    NEW_PROJECT="$CURRENT_PROJECT"
    echo -e "${BLUE}保持项目名不变: $NEW_PROJECT${NC}"
fi

# 确认修改
echo ""
echo -e "${YELLOW}======================================${NC}"
echo -e "${YELLOW}即将执行以下修改：${NC}"
echo -e "  包名: ${RED}$CURRENT_PACKAGE${NC} -> ${GREEN}$NEW_PACKAGE${NC}"
echo -e "  项目名: ${RED}$CURRENT_PROJECT${NC} -> ${GREEN}$NEW_PROJECT${NC}"
echo -e "${YELLOW}======================================${NC}"
echo ""
read -p "确认执行？(y/N): " CONFIRM

if [[ ! "$CONFIRM" =~ ^[Yy]$ ]]; then
    echo -e "${RED}已取消操作${NC}"
    exit 0
fi

echo ""
echo -e "${GREEN}开始执行重命名...${NC}"
echo ""

# ===== 1. 更新包名 =====
if [ "$CURRENT_PACKAGE" != "$NEW_PACKAGE" ]; then
    echo -e "${BLUE}[1/7] 更新包名...${NC}"
    
    # 转换包名为路径格式
    CURRENT_PATH=$(echo $CURRENT_PACKAGE | tr '.' '/')
    NEW_PATH=$(echo $NEW_PACKAGE | tr '.' '/')
    
    # 更新 build.gradle 中的 namespace 和 applicationId
    sed -i '' "s/namespace '$CURRENT_PACKAGE'/namespace '$NEW_PACKAGE'/g" app/build.gradle
    sed -i '' "s/applicationId \"$CURRENT_PACKAGE\"/applicationId \"$NEW_PACKAGE\"/g" app/build.gradle
    
    # 更新所有 Kotlin 文件中的 package 声明
    find app/src -name "*.kt" -type f -exec sed -i '' "s/package $CURRENT_PACKAGE/package $NEW_PACKAGE/g" {} +
    
    # 更新测试文件中的包名引用
    sed -i '' "s/\"$CURRENT_PACKAGE\"/\"$NEW_PACKAGE\"/g" app/src/androidTest/java/$CURRENT_PATH/ExampleInstrumentedTest.kt 2>/dev/null || true
    
    # 移动目录结构
    echo -e "${BLUE}   移动源代码目录结构...${NC}"
    
    # 处理 main 目录
    if [ -d "app/src/main/java/$CURRENT_PATH" ]; then
        # 创建新的目录结构
        mkdir -p "app/src/main/java/$NEW_PATH"
        # 移动文件
        cp -r app/src/main/java/$CURRENT_PATH/* app/src/main/java/$NEW_PATH/
        # 删除旧目录
        rm -rf app/src/main/java/$CURRENT_PATH
        # 清理空的父目录
        PARENT_DIR=$(dirname "app/src/main/java/$CURRENT_PATH")
        while [ "$PARENT_DIR" != "app/src/main/java" ] && [ -d "$PARENT_DIR" ] && [ -z "$(ls -A $PARENT_DIR)" ]; do
            rmdir "$PARENT_DIR"
            PARENT_DIR=$(dirname "$PARENT_DIR")
        done
    fi
    
    # 处理 androidTest 目录
    if [ -d "app/src/androidTest/java/$CURRENT_PATH" ]; then
        mkdir -p "app/src/androidTest/java/$NEW_PATH"
        cp -r app/src/androidTest/java/$CURRENT_PATH/* app/src/androidTest/java/$NEW_PATH/
        rm -rf app/src/androidTest/java/$CURRENT_PATH
        PARENT_DIR=$(dirname "app/src/androidTest/java/$CURRENT_PATH")
        while [ "$PARENT_DIR" != "app/src/androidTest/java" ] && [ -d "$PARENT_DIR" ] && [ -z "$(ls -A $PARENT_DIR)" ]; do
            rmdir "$PARENT_DIR"
            PARENT_DIR=$(dirname "$PARENT_DIR")
        done
    fi
    
    # 处理 test 目录
    if [ -d "app/src/test/java/$CURRENT_PATH" ]; then
        mkdir -p "app/src/test/java/$NEW_PATH"
        cp -r app/src/test/java/$CURRENT_PATH/* app/src/test/java/$NEW_PATH/
        rm -rf app/src/test/java/$CURRENT_PATH
        PARENT_DIR=$(dirname "app/src/test/java/$CURRENT_PATH")
        while [ "$PARENT_DIR" != "app/src/test/java" ] && [ -d "$PARENT_DIR" ] && [ -z "$(ls -A $PARENT_DIR)" ]; do
            rmdir "$PARENT_DIR"
            PARENT_DIR=$(dirname "$PARENT_DIR")
        done
    fi
    
    echo -e "${GREEN}   ✓ 包名更新完成${NC}"
else
    echo -e "${BLUE}[1/7] 跳过包名更新（未更改）${NC}"
fi

# ===== 2. 更新项目名 =====
if [ "$CURRENT_PROJECT" != "$NEW_PROJECT" ]; then
    echo -e "${BLUE}[2/7] 更新项目名...${NC}"
    
    # 更新 settings.gradle
    sed -i '' "s/rootProject.name = \"$CURRENT_PROJECT\"/rootProject.name = \"$NEW_PROJECT\"/g" settings.gradle
    
    # 更新 strings.xml
    sed -i '' "s/<string name=\"app_name\">$CURRENT_PROJECT<\/string>/<string name=\"app_name\">$NEW_PROJECT<\/string>/g" app/src/main/res/values/strings.xml
    
    echo -e "${GREEN}   ✓ 项目名更新完成${NC}"
else
    echo -e "${BLUE}[2/7] 跳过项目名更新（未更改）${NC}"
fi

# ===== 3. 更新主题名称 =====
if [ "$CURRENT_PROJECT" != "$NEW_PROJECT" ]; then
    echo -e "${BLUE}[3/7] 更新主题名称...${NC}"
    
    # 更新 themes.xml (values)
    sed -i '' "s/Base.Theme.$CURRENT_PROJECT/Base.Theme.$NEW_PROJECT/g" app/src/main/res/values/themes.xml
    sed -i '' "s/Theme.$CURRENT_PROJECT/Theme.$NEW_PROJECT/g" app/src/main/res/values/themes.xml
    sed -i '' "s/FullScreen.Theme.$CURRENT_PROJECT/FullScreen.Theme.$NEW_PROJECT/g" app/src/main/res/values/themes.xml
    
    # 更新 themes.xml (values-night)
    sed -i '' "s/Base.Theme.$CURRENT_PROJECT/Base.Theme.$NEW_PROJECT/g" app/src/main/res/values-night/themes.xml
    sed -i '' "s/Theme.$CURRENT_PROJECT/Theme.$NEW_PROJECT/g" app/src/main/res/values-night/themes.xml
    sed -i '' "s/FullScreen.Theme.$CURRENT_PROJECT/FullScreen.Theme.$NEW_PROJECT/g" app/src/main/res/values-night/themes.xml
    
    echo -e "${GREEN}   ✓ 主题名称更新完成${NC}"
else
    echo -e "${BLUE}[3/7] 跳过主题名称更新（未更改）${NC}"
fi

# ===== 4. 更新 AndroidManifest.xml 中的主题引用 =====
if [ "$CURRENT_PROJECT" != "$NEW_PROJECT" ]; then
    echo -e "${BLUE}[4/7] 更新 AndroidManifest.xml...${NC}"
    
    sed -i '' "s/@style\/Theme.$CURRENT_PROJECT/@style\/Theme.$NEW_PROJECT/g" app/src/main/AndroidManifest.xml
    sed -i '' "s/@style\/FullScreen.Theme.$CURRENT_PROJECT/@style\/FullScreen.Theme.$NEW_PROJECT/g" app/src/main/AndroidManifest.xml
    
    echo -e "${GREEN}   ✓ AndroidManifest.xml 更新完成${NC}"
else
    echo -e "${BLUE}[4/7] 跳过 AndroidManifest.xml 更新（未更改）${NC}"
fi

# ===== 5. 清理缓存 =====
echo -e "${BLUE}[5/7] 清理构建缓存...${NC}"
rm -rf .gradle app/build build .idea
echo -e "${GREEN}   ✓ 缓存清理完成${NC}"

# ===== 6. 完成 =====
echo ""
echo -e "${GREEN}======================================${NC}"
echo -e "${GREEN}   重命名完成！${NC}"
echo -e "${GREEN}======================================${NC}"
echo ""
echo -e "${YELLOW}新的配置：${NC}"
echo -e "  包名: ${GREEN}$NEW_PACKAGE${NC}"
echo -e "  项目名: ${GREEN}$NEW_PROJECT${NC}"
echo ""
echo -e "${YELLOW}提示：${NC}"
echo -e "  1. 建议在 Android Studio 中执行 ${BLUE}File -> Invalidate Caches / Restart${NC}"
echo -e "  2. 或者执行 ${BLUE}./gradlew clean${NC} 重新构建项目"
echo ""

